{
  "info": {
    "_postman_id": "e-commerce-api-collection",
    "name": "E-Commerce API",
    "description": "Complete collection for testing the NestJS E-Commerce API with JWT authentication, user management, products, orders, categories, addresses, and cart functionality.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "product_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "category_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "order_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "address_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "App",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            },
            "description": "Health check endpoint - returns 'Hello World!'"
          },
          "response": []
        }
      ],
      "description": "Basic application endpoints"
    },
    {
      "name": "Auth",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Debug the response",
                  "console.log('Response status:', pm.response.code);",
                  "console.log('Response body:', pm.response.text());",
                  "",
                  "if (pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        console.log('Parsed response:', response);",
                  "        ",
                  "        if (response.access_token) {",
                  "            pm.environment.set('jwt_token', response.access_token);",
                  "            pm.globals.set('jwt_token', response.access_token);",
                  "            console.log('Token saved:', response.access_token.substring(0, 20) + '...');",
                  "        } else {",
                  "            console.log('No access_token found in response');",
                  "        }",
                  "    } catch (error) {",
                  "        console.log('Error parsing response:', error);",
                  "    }",
                  "} else {",
                  "    console.log('Login failed with status:', pm.response.code);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@ecommerce.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate a user and get JWT token"
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile"]
            },
            "description": "Get current user profile"
          },
          "response": []
        },
        {
          "name": "Login as Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Debug the response",
                  "console.log('Response status:', pm.response.code);",
                  "console.log('Response body:', pm.response.text());",
                  "",
                  "if (pm.response.code === 200) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        console.log('Parsed response:', response);",
                  "        ",
                  "        if (response.access_token) {",
                  "            pm.environment.set('jwt_token', response.access_token);",
                  "            pm.globals.set('jwt_token', response.access_token);",
                  "            console.log('Token saved:', response.access_token.substring(0, 20) + '...');",
                  "        } else {",
                  "            console.log('No access_token found in response');",
                  "        }",
                  "    } catch (error) {",
                  "        console.log('Error parsing response:', error);",
                  "    }",
                  "} else {",
                  "    console.log('Login failed with status:', pm.response.code);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"maria.silva@email.com\",\n  \"password\": \"user123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login as customer (Maria Silva) from seeded data"
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/forgot-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "forgot-password"]
            },
            "description": "Initiate password recovery flow"
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset_token_here\",\n  \"newPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/reset-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "reset-password"]
            },
            "description": "Complete password recovery flow"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints"
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User (Register)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.environment.set('user_id', response.id);",
                  "        pm.globals.set('user_id', response.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": ["{{base_url}}"],
              "path": ["users"]
            },
            "description": "Register a new user"
          },
          "response": []
        },
        {
          "name": "Update My Profile",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Name\",\n  \"cpf\": \"12345678901\",\n  \"phone\": \"+55 11 99999-9999\",\n  \"birthDate\": \"1990-01-01\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/me",
              "host": ["{{base_url}}"],
              "path": ["users", "me"]
            },
            "description": "Update current user profile"
          },
          "response": []
        },
        {
          "name": "Change My Password",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"oldPassword\": \"currentpassword123\",\n  \"newPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/me/password",
              "host": ["{{base_url}}"],
              "path": ["users", "me", "password"]
            },
            "description": "Change current user password"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users?page=1&limit=10&search=john",
              "host": ["{{base_url}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "john"
                }
              ]
            },
            "description": "List all users with pagination and search (Admin only)"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            },
            "description": "Get specific user by ID (Admin only)"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Update User Role",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"ADMIN\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/role",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}", "role"]
            },
            "description": "Change user role (Admin only)"
          },
          "response": []
        }
      ],
      "description": "User management endpoints"
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "Get All Categories",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/categories?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["categories"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all visible categories (Public)"
          },
          "response": []
        },
        {
          "name": "Get Category by ID",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/categories/id/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["categories", "id", "{{category_id}}"]
            },
            "description": "Get category by ID (Public)"
          },
          "response": []
        },
        {
          "name": "Get Category by Slug",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/categories/electronics",
              "host": ["{{base_url}}"],
              "path": ["categories", "electronics"]
            },
            "description": "Get category by slug (Public)"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Create Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.environment.set('category_id', response.id);",
                  "        pm.globals.set('category_id', response.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Electronics\",\n  \"description\": \"Electronic devices and gadgets\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/categories",
              "host": ["{{base_url}}"],
              "path": ["categories"]
            },
            "description": "Create new category (Admin only)"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Toggle Category Status",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/categories/{{category_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["categories", "{{category_id}}", "status"]
            },
            "description": "Toggle category visibility (Admin only)"
          },
          "response": []
        }
      ],
      "description": "Category management endpoints"
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products?page=1&limit=10&search=phone&categorySlug=electronics&minPrice=100&maxPrice=1000&sortBy=name&sortOrder=asc",
              "host": ["{{base_url}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "phone"
                },
                {
                  "key": "categorySlug",
                  "value": "electronics"
                },
                {
                  "key": "minPrice",
                  "value": "100"
                },
                {
                  "key": "maxPrice",
                  "value": "1000"
                },
                {
                  "key": "sortBy",
                  "value": "name"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                }
              ]
            },
            "description": "Get all products with search, filter, and sort (Public)"
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["products", "{{product_id}}"]
            },
            "description": "Get product by ID (Public)"
          },
          "response": []
        },
        {
          "name": "Get Product by Slug",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/products/slug/iphone-15-pro",
              "host": ["{{base_url}}"],
              "path": ["products", "slug", "iphone-15-pro"]
            },
            "description": "Get product by slug (Public)"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.environment.set('product_id', response.id);",
                  "        pm.globals.set('product_id', response.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"iPhone 15 Pro\",\n  \"description\": \"Latest iPhone with A17 Pro chip\",\n  \"sku\": \"IPHONE15PRO-256GB-BLACK\",\n  \"stockQuantity\": 50,\n  \"oldPrice\": 1299.99,\n  \"currentPrice\": 1199.99,\n  \"categoryIds\": [\"{{category_id}}\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/products",
              "host": ["{{base_url}}"],
              "path": ["products"]
            },
            "description": "Create new product (Admin only)"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Update Product",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"iPhone 15 Pro Max\",\n  \"currentPrice\": 1099.99,\n  \"stockQuantity\": 45\n}"
            },
            "url": {
              "raw": "{{base_url}}/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["products", "{{product_id}}"]
            },
            "description": "Update product details (Admin only)"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Update Product Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"INACTIVE\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/products/{{product_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["products", "{{product_id}}", "status"]
            },
            "description": "Update product status (Admin only)"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Add Category to Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"categoryId\": \"{{category_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/products/{{product_id}}/categories",
              "host": ["{{base_url}}"],
              "path": ["products", "{{product_id}}", "categories"]
            },
            "description": "Add category to product (Admin only)"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Upload Product Images",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Upload up to 5 image files"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/products/{{product_id}}/images",
              "host": ["{{base_url}}"],
              "path": ["products", "{{product_id}}", "images"]
            },
            "description": "Upload images for product (Admin only)"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Delete Product Image",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/products/images/image-id-here",
              "host": ["{{base_url}}"],
              "path": ["products", "images", "image-id-here"]
            },
            "description": "Delete product image (Admin only)"
          },
          "response": []
        }
      ],
      "description": "Product management endpoints"
    },
    {
      "name": "Addresses",
      "item": [
        {
          "name": "Create Address",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.environment.set('address_id', response.id);",
                  "        pm.globals.set('address_id', response.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Home\",\n  \"type\": \"RESIDENTIAL\",\n  \"street\": \"Main Street\",\n  \"number\": \"123\",\n  \"complement\": \"Apt 4B\",\n  \"neighborhood\": \"Downtown\",\n  \"city\": \"São Paulo\",\n  \"state\": \"SP\",\n  \"zipCode\": \"01234-567\",\n  \"isPrimary\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/addresses",
              "host": ["{{base_url}}"],
              "path": ["addresses"]
            },
            "description": "Create new address for current user"
          },
          "response": []
        },
        {
          "name": "Get My Addresses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/addresses",
              "host": ["{{base_url}}"],
              "path": ["addresses"]
            },
            "description": "Get all addresses for current user"
          },
          "response": []
        },
        {
          "name": "Get Address by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/addresses/{{address_id}}",
              "host": ["{{base_url}}"],
              "path": ["addresses", "{{address_id}}"]
            },
            "description": "Get specific address by ID"
          },
          "response": []
        },
        {
          "name": "Update Address",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Work Address\",\n  \"street\": \"Business Avenue\",\n  \"number\": \"456\",\n  \"isPrimary\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/addresses/{{address_id}}",
              "host": ["{{base_url}}"],
              "path": ["addresses", "{{address_id}}"]
            },
            "description": "Update specific address"
          },
          "response": []
        },
        {
          "name": "Delete Address",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/addresses/{{address_id}}",
              "host": ["{{base_url}}"],
              "path": ["addresses", "{{address_id}}"]
            },
            "description": "Soft delete (disable) address"
          },
          "response": []
        }
      ],
      "description": "Address management endpoints"
    },
    {
      "name": "Cart",
      "item": [
        {
          "name": "Get My Cart",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/cart",
              "host": ["{{base_url}}"],
              "path": ["cart"]
            },
            "description": "Get current user's cart"
          },
          "response": []
        },
        {
          "name": "Add Item to Cart",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/cart/items",
              "host": ["{{base_url}}"],
              "path": ["cart", "items"]
            },
            "description": "Add item to cart"
          },
          "response": []
        },
        {
          "name": "Update Cart Item Quantity",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 3\n}"
            },
            "url": {
              "raw": "{{base_url}}/cart/items/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["cart", "items", "{{product_id}}"]
            },
            "description": "Update quantity of item in cart"
          },
          "response": []
        },
        {
          "name": "Remove Item from Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/cart/items/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["cart", "items", "{{product_id}}"]
            },
            "description": "Remove specific item from cart"
          },
          "response": []
        },
        {
          "name": "Clear Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/cart",
              "host": ["{{base_url}}"],
              "path": ["cart"]
            },
            "description": "Clear entire cart"
          },
          "response": []
        }
      ],
      "description": "Shopping cart endpoints"
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.environment.set('order_id', response.id);",
                  "        pm.globals.set('order_id', response.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"addressId\": \"{{address_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/orders",
              "host": ["{{base_url}}"],
              "path": ["orders"]
            },
            "description": "Create order from cart items"
          },
          "response": []
        },
        {
          "name": "Get My Orders",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/orders?page=1&limit=10&status=PENDING",
              "host": ["{{base_url}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "PENDING"
                }
              ]
            },
            "description": "Get current user's orders"
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["orders", "{{order_id}}"]
            },
            "description": "Get specific order by ID"
          },
          "response": []
        },
        {
          "name": "Cancel My Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/orders/{{order_id}}/cancel",
              "host": ["{{base_url}}"],
              "path": ["orders", "{{order_id}}", "cancel"]
            },
            "description": "Cancel own order"
          },
          "response": []
        },
        {
          "name": "[ADMIN] Update Order Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"SHIPPED\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/orders/{{order_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["orders", "{{order_id}}", "status"]
            },
            "description": "Update order status (Admin only)"
          },
          "response": []
        }
      ],
      "description": "Order management endpoints"
    },
    {
      "name": "File Uploads",
      "item": [
        {
          "name": "Access Product Image",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/uploads/filename.jpg",
              "host": ["{{base_url}}"],
              "path": ["uploads", "filename.jpg"]
            },
            "description": "Access uploaded product images (Static files)"
          },
          "response": []
        }
      ],
      "description": "File access endpoints"
    }
  ]
}
